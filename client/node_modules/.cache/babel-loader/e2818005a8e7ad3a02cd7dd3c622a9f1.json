{"ast":null,"code":"const initialState = {\n  Countries: [],\n  allCountries: [],\n  Activities: [],\n  allActivities: [],\n  Detail: []\n};\nexport default function rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'GET_COUNTRIES':\n      return {\n        ...state,\n        Countries: action.payload,\n        allCountries: action.payload\n      };\n    case 'GET_ACTIVITIES':\n      return {\n        ...state,\n        Activities: action.payload\n      };\n    case 'GET_COUNTRY_NAME':\n      return {\n        ...state,\n        Countries: action.payload\n      };\n    case 'GET_COUNTRY_ID':\n      return {\n        ...state,\n        Detail: action.payload\n      };\n    case 'POST_ACTIVITY':\n      return {\n        ...state\n      };\n    case 'COUNTRY_BY_TYPE':\n      const allCountries = state.allCountries;\n      const countriesFiltered = action.payload === 'all' ? allCountries : allCountries.filter(item => item.continent === action.payload);\n      return {\n        ...state,\n        Countries: countriesFiltered\n      };\n    case 'ACTIVITY_BY_NAME':\n      return {\n        ...state,\n        Countries: action.payload\n      };\n    case 'ACTIVITY_BY_ORDER':\n      const sortArray = action.payload === 'Asc' ? state.Countries.sort(function (a, b) {\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (b.name > a.name) {\n          return -1;\n        }\n        return 0;\n      }) : state.Countries.sort(function (a, b) {\n        if (a.name > b.name) {\n          return -1;\n        }\n        if (b.name > a.name) {\n          return 1;\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        Countries: sortArray\n      };\n    case 'FILTER_BY_POPULATION':\n      const sortPopulation = action.payload === 'Asc' ? state.Countries.sort((a, b) => a.population - b.population) : state.Countries.sort((a, b) => b.population - a.population);\n      return {\n        ...state,\n        Countries: sortPopulation\n      };\n    case 'FILTER_BY_POPULATION':\n      const allCountries2 = state.allCountries;\n      const countriesFiltered2 = action.payload === 'all' ? allCountries2 : allCountries.filter(item => item.continent === action.payload);\n      return {\n        ...state,\n        Countries: countriesFiltered\n      };\n    case 'FILTER_BY_AREA':\n      const sortArea = action.payload === 'Asc' ? state.Countries.sort((a, b) => a.area - b.area) : state.Countries.sort((a, b) => b.area - a.area);\n      return {\n        ...state,\n        Countries: sortArea\n      };\n\n    // case 'FILTER_BY_ACTIVITY':\n    //     const allCountries2 = state.allCountries\n    //     const countriesFiltered2 = action.payload === 'all' ? allCountries2 : allCountries2.filter(item => item.activities.includes(action.payload))\n    //     return{\n    //         ...state,\n    //         Countries: countriesFiltered2\n    //     }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["initialState","Countries","allCountries","Activities","allActivities","Detail","rootReducer","state","action","type","payload","countriesFiltered","filter","item","continent","sortArray","sort","a","b","name","sortPopulation","population","allCountries2","countriesFiltered2","sortArea","area"],"sources":["E:/Henry/PI/FT-32b/PI-COUNTRIES-HENRY-main/client/src/reducer/index.js"],"sourcesContent":["\n\nconst initialState = {\n    Countries: [],\n    allCountries:[],\n    Activities:[],\n    allActivities:[],\n    Detail:[]\n}\n\nexport default function rootReducer(state= initialState, action){\n    switch (action.type) {\n        case 'GET_COUNTRIES':\n            return {\n                ...state,\n                Countries: action.payload,\n                allCountries: action.payload\n            }\n\n            \n        case 'GET_ACTIVITIES':\n            return{\n                ...state,\n                Activities:action.payload\n            } \n\n\n        case 'GET_COUNTRY_NAME':\n            return{\n                ...state,\n                Countries: action.payload\n            }\n            \n            \n        case 'GET_COUNTRY_ID':\n            return{\n                ...state,\n                Detail: action.payload\n            }    \n\n        case 'POST_ACTIVITY':\n            return{\n                ...state\n            }    \n\n            \n\n        case 'COUNTRY_BY_TYPE':\n            const allCountries = state.allCountries\n            const countriesFiltered = action.payload === 'all' ? allCountries : allCountries.filter(item => item.continent === action.payload)\n            return{\n                ...state,\n                Countries: countriesFiltered\n            }\n\n\n\n\n        case 'ACTIVITY_BY_NAME':\n            return{\n                ...state,\n                Countries: action.payload\n            } \n            \n\n\n            \n        case 'ACTIVITY_BY_ORDER':\n\n            const sortArray = action.payload === 'Asc' ?\n            state.Countries.sort(function(a,b) {\n                if(a.name > b.name) {\n                    return 1\n                }\n                if(b.name > a.name) {\n                    return -1\n                }\n                return 0\n            } ) :\n            state.Countries.sort(function(a,b) {\n                if(a.name > b.name) {\n                    return -1\n                }\n                if(b.name > a.name) {\n                    return 1\n                }\n                return 0\n            })\n            \n            return{\n                ...state,\n                Countries:sortArray\n            }\n\n            \n        case 'FILTER_BY_POPULATION':\n                const sortPopulation = action.payload === 'Asc' ?\n                state.Countries.sort((a,b) => a.population - b.population) :\n                state.Countries.sort((a,b) => b.population - a.population)\n\n                return{\n                    ...state,\n                    Countries: sortPopulation\n                }\n\n        case 'FILTER_BY_POPULATION':\n                const allCountries2 = state.allCountries\n                const countriesFiltered2 = action.payload === 'all' ? allCountries2 : allCountries.filter(item => item.continent === action.payload)\n              \n                    return{\n                        ...state,\n                        Countries: countriesFiltered\n                    }\n        \n        case 'FILTER_BY_AREA':\n                const sortArea = action.payload === 'Asc' ?\n                state.Countries.sort((a,b) => a.area - b.area) :\n                state.Countries.sort((a,b) => b.area - a.area)\n\n                return{\n                    ...state,\n                    Countries: sortArea\n                }\n                                    \n\n                            \n        // case 'FILTER_BY_ACTIVITY':\n        //     const allCountries2 = state.allCountries\n        //     const countriesFiltered2 = action.payload === 'all' ? allCountries2 : allCountries2.filter(item => item.activities.includes(action.payload))\n        //     return{\n        //         ...state,\n        //         Countries: countriesFiltered2\n        //     }\n\n\n\n        default:\n            return state\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}